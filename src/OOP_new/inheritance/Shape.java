package OOP_new.inheritance;

public  abstract class Shape { // если есть класс экземпляры которого не должны быть
    //созданы.. этот класс просто должен быть родительским для других классов
    // то мы делаем его абстрактным

    //что бы запретить наследоваться от класса его следует сделать final
   protected int a; // поля
   protected int b;

   public Shape(int a, int b){ //конструктор в котором проинициализированы поля
       this.a = a;
       this.b = b;
   }

    public final int getA() { // final запрет на переопределение метадов
        return a;
    }//добавлены геттеры на поля final запрет на переопределение метода

    public final int getB() {
        return b;
    }//добавлены геттеры на поля final запрет на переопределение метода

//    public  int getPerimetr(){
//      return 0;
//   }
                            //и добавляем метод который вычисляет периметр
    public abstract int getPerimetr();
   // и если какие то методы обязательно
    // нужно переопределять в классах наследниках,
    // то мы так же делаем этот метод абстрактным
    // реализация метода здесь не пишется
                            //добавляем метод который будет выводить периметр в консоль
    public final void showPerimetr(){ //final запрет на переопределение метода
       System.out.println(getPerimetr());
   }
}
