package HomeWork18.Collection.main;

public class MyArrayList {

    private String[] array = new String[10]; // Создаем массив изначально с 10
                                             // элементами
    private int size = 0; // Создаем переменную size равную 0

    public void add(String s) { // Метод добавления
        array[size] = s; // Массиву array c индексом size присваиваем значение s;
                         // определенному индексу соответствует определенная строка,
                         // сколько строк такой и размер
        size++; // Когда массив наполняется строкой, то увеличивается размер массива
        if (size == array.length) { // Если размер массива (size) равен длине
                                    // массива(length), то создаем новый массив с
                                    // удвоенной длинной
            String[] newArray = new String[array.length * 2];
            for (int i = 0; i < array.length; i++) {
                newArray[i] = array[i]; // В новый массив перетаскиваем значения из
                                        // старого
            }
            array = newArray; // Значению array присваиваем значение newArray
        }
    }

    public void remove(int index) { // Метод удаления. Передаем индекс, значение
                                    // которого хотим удалить. например 6
        if (index >= 0 && index < size) { // Назначаем проверку от неверного ввода,
                                          // чтобы неменьше 0 и не больше размера
            for (int i = index; i < size - 1; i++) {// Начинаем с индекса 6; доходим до
                                                    // предпоследнего значения т.к.
                                                    // предпоследнее отдаст значение
                                                    // последнему
                array[i] = array[i + 1]; // Шестому элементу присваиваем значение следующему
                                         // (седьмому) (i = 6 i+1=7; 6.=7.)
            }
            size--; // т.к. одно значение мы удаляем то и размер надо уменьшить на 1
        }
    }

    public void remove(String s) { // Перегруженный метод remove для удаления
                                   // элемента не по индексу , а по строке
        int index = -1; /** Здесь сноска
         Нужно узнать номер индекса элемента который мы ищем, а
        затем вызвать метод remove c этим индексом. Для этого создаем переменную с
        индеском со значением -1 (*)
        */
        for (int i = 0; i < size; i++) { // Пройдем по всем элементам массива до size
            if (s.equals(array[i])) { // И если у нас строка равна элементу массива,
                                      // то значит элемент найден
                index = i; // Поэтому индекс соответствует найденному элементу
                break;// Выходим из цикла
            }
        }
        if (index != -1) { // если индекс не равен -1
            remove(index); // то выполняется метод remove (найденный индекс)
        }
    }

    public int getSize() {
        return size;
    } // Добавим геттер, чтобы узнать количество
                                            // элементов

    public String get(int index) { // Чтобы вывести элемент массива на экран,
                                   // то мы можем вывести его по его индексу
        if (index >= 0 && index < size) { // назначаем проверку от неверного ввода
            return array[index]; //возвращает нужный нам элемент из массива
        } else {
            return "Элемент не найден";
        }
    }
}
/** Собственно сноска
 * Нам нужно узнать находится ли элемент в коллекции. Поэтому мы в цикле ищем его порядковый номер, если нашли то переменной index присваиваем значение и выходим из цикла. Потом за пределами нам нужноузнать был ли элемент найден.
 *
 * Поэтому мы могли создать еще одну переменную типа boolean elementFound изначально присвоить false, и если элемент найден, то присвоить ей значение true.
 *
 * Но чтобы не плодить переменные, можно обойтись одной. Мы ей присвоили -1 (можно было установить любое значение меньше, чем 0), поскольку такого индекса у  найденного элемента точно не будет. И проверяем, если элемент найден(то есть если индекс не равен -1), то удаляем элемент
 * */

/*
* Создаем новый масиив вдвое больше прежнего и копируем в него все элементы из
* первого массива. Теперь у нас переменная newArray ссылается на новый массив, а
* переменная array ссылается на старый массив. Старый нам больше не нужен,
* необходимо, чтобы мы дальше работали с новым массивом. Поэтому переменной array
* мы присваиваем значение нового массива. То есть теперь и переменная array и
* переменная newArray ссылаются на новый массив, а на старый больше не ссылается
* никто. Поэтому все методы, которые добавляли или удаляли элемент из массива,
* теперь будут работать с новым массиво, который мы положили в переменную array.
*
* Переменной индекс мы присвоили -1, т.к. нам нужно найти индекс удаляемого
* элемента. Он может быть любым числом от 0 до бесконечности. В теории у нас может
* быть очень большой массив и у элемента, который мы ищем окажется индекс 100 млн
* или наоборот, он окажется самым первым в массиве и его индекс будет 0.
* Чтобы понять, что элемент был найден, мы изначально присваиваем отрицательное
* значение индексу. Если элемент найден не будет, то индекс так и останется
* отрицательным, а если будет найден, то поменяет значение на найденное.
*
* */